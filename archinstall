#!/bin/bash
# archinstall - Arch Linux installer
# Assumes you have created partitions
# filesystems & are they are mounted to new_arch
#
# by Mr Green
#

# Test for sudo/root
[[ $EUID != 0 ]] && echo "Please run as root.  Terminating..." && exit 1

# Directories variables
new_arch=/mnt
[ ! -d ${new_arch} ] && mkdir -p ${new_arch}
new_etc="${new_arch}/etc"
script_path=$(readlink -f ${0%/*})
mkdir -p ${new_arch}/{sys,proc,dev}

# Username, groups and passwords
user_groups="adm,storage,optical,audio,video,network,wheel,power,lp,log"
user_name="arch"
user_passwd="pass"
root_passwd="pass"

# System settings
wired=true
aur=true
host_name="archlinux"
keymap="KEYMAP=uk"
locale="en_GB.UTF-8"
time_zone="Europe/London"

bind_mount()
{
mount -t sysfs sysfs ${new_arch}/sys
mount -t proc proc ${new_arch}/proc
mount -o bind /dev ${new_arch}/dev
}

bind_umount()
{
umount -l ${new_arch}/sys ${new_arch}/proc ${new_arch}/dev
}

# Chroot function
archroot()
{
bind_mount
chroot ${new_arch} "$@"
bind_umount
}

arch_strap()
{
bind_mount
arch_pkg=${new_arch}/var/cache/pacman/pkg
pacman --root ${new_arch} --cachedir ${arch_pkg} --noconfirm --needed -Sy "$@"
bind_umount
}

# Does exactly what it says
install_packer()
{
arch_strap base-devel curl git jansson jshon
archroot << EOF
curl -O https://aur.archlinux.org/packages/pa/packer/packer.tar.gz
tar -zxvf packer.tar.gz
rm packer.tar.gz
cd packer
makepkg -is --noconfirm --asroot
EOF
rm -rf ${new_arch}/packer
}


# Install base and packages from package_list
system_setup()
{
# Set pacman directories
mkdir -m 0755 -p ${new_arch}/var/{cache/pacman/pkg,lib/pacman,log}

# install system
arch_strap base $(grep -v "^#" ${script_path}/package_list)

# cp resolv to allow us to use pacman under chroot
cp -L /etc/resolv.conf ${new_arch}/etc/resolv.conf

# Install packer
[[ ${aur} == true ]] && install_packer

# Setup fstab
cp ${script_path}/fstab_file ${new_arch}/etc/fstab

# Timezone
ln -s ${new_arch}/usr/share/zoneinfo/${time_zone} ${new_etc}/localtime

# Hostname
echo ${host_name} > ${new_arch}/hostname

# Locale and keymap
echo ${keymap} > ${new_etc}/vconsole.conf
echo "LANG=${locale}" > ${new_etc}/locale.conf
echo "${locale} UTF-8" > ${new_etc}/locale.gen

# Copy host mirrorlist
cp -a /etc/pacman.d/mirrorlist ${new_arch}/etc/pacman.d/

# Copy host keys
cp -a /etc/pacman.d/gnupg ${new_arch}/etc/pacman.d/

# Install kernel
archroot mkinitcpio -p linux
archroot locale-gen

# Wired Network
[[ ${wired} == true ]] && archroot /usr/bin/systemctl -f enable dhcpcd.service

}

# Install syslinux
bootloader()
{
root_part=$(df | grep -w ${new_arch} | awk {'print $1'})
sed -i "s|/dev/sda3|$root_part|g" ${new_arch}/boot/syslinux/syslinux.cfg
archroot syslinux-install_update -iam
}

# Setup Openbox
openbox_setup()
{
mkdir -p ${new_arch}/etc/skel/.config/openbox
echo "exec openbox-session" >> ${new_arch}/etc/skel/.xinitrc
cp ${new_arch}/etc/xdg/openbox/{rc.xml,menu.xml,autostart,environment} \
	 ${new_arch}/etc/skel/.config/openbox
}

user_and_root()
{
# Add user and set up passwords
archroot useradd -m -g users -G ${user_groups} -s /bin/bash ${user_name}
echo "${user_name}:${user_passwd}" | archroot chpasswd
echo "root:${root_passwd}" | archroot chpasswd
# Clean up
rm -rf ${new_arch}/etc/skel/
}

# Main ()
system_setup
bootloader
openbox_setup
user_and_root

